#include <iostream>
#include <queue>

using namespace std;

int box[101][101][101];
queue<pair<pair<int, int>,int>> q;
int n, m, h;
int dx[6] = {-1, 0, 1, 0, 0, 0};
int dy[6] = { 0, 1, 0, -1, 0, 0 };
int dz[6] = { 0, 0, 0, 0, 1, -1 };

void bfs() {
    
    while (!q.empty()) {
        int z = q.front().first.first;
        int x= q.front().first.second;
        int y = q.front().second;
        q.pop();

        for (int i = 0; i < 6; i++) {
            int nextX = x + dx[i];
            int nextY = y + dy[i];
            int nextZ = z + dz[i];
            if (nextX >= 0 && nextX < n && nextY >= 0 && nextY < m && nextZ >=0 && nextZ<h &&box[nextZ][nextX][nextY] == 0) {
                box[nextZ][nextX][nextY] = box[z][x][y] + 1;
                q.push(make_pair(make_pair(nextZ, nextX),nextY));
            }
        }
    }
}

int main()
{

    scanf("%d %d %d", &m, &n, &h);

    for (int i = 0; i < h; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < m; k++) {
                scanf("%d", &box[i][j][k]);
                //익은 토마토의 좌표면 큐에 삽입
                if (box[i][j][k] == 1) {
                    q.push(make_pair(make_pair(i, j), k));
                }
            }
         }
    }


    bfs();

    //날짜 계산
    int date = 1;
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < m; k++) {
                //안익은 토마토가 존재하면 -1 출력
                if (box[i][j][k] == 0) {
                    printf("-1\n");
                    return 0;
                }
                
                //box에 저장된 최대값 구하기
                if (box[i][j][k] > date) date = box[i][j][k];
            }
        }
    }

    if (date == 1) printf("0\n"); //최대값이 1이면 원래 다 익어있던 것
    else printf("%d", date-1);

    return 0;
}
